import(Simple-RPG\Enemy)
import(Simple-RPG\Player)
import(ImageReference)
import(Windows/Form)
import(Windows/Line)
import(Windows/SimpleLabel)
import(Windows/RECT)
import(Tuple<RECT,Enemy>)
import(List<Tuple<RECT,Enemy>>)
import(Windows/CollisionEventArgs)
import(Tuple<SimpleLabel,Enemy>)
import(List<Tuple<SimpleLabel,Enemy>>)
import(Windows/RECTF)
import(Windows/TimerEventArgs)
import(Event<int>)
import(Simple-RPG\BattleFinishArgs)
dllref(User32,str,str,int,int) cdecl:wsprintfA int
public Enemy# enemies ; allow up to 3 ? or ignore rest after 3
public Player player
private Form form
private SimpleLabel healthLbl becomes new(SimpleLabel)
private List<Tuple<RECT,Enemy>> enemyBtns becomes new(List<Tuple<RECT,Enemy>>)
private List<Tuple<SimpleLabel,Enemy>> enemyLbls becomes new(List<Tuple<SimpleLabel,Enemy>>)
private bool onCd becomes false
private int lastIndex
private int attackCdMax
private int attackCdTenPercentEquivalent
private RECT attackCdLoadingBar becomes new(RECT)
private int expGained
private int enemiesKilled
pullable Event<int> onBattleEnd becomes new(Event<int>)
private bool playerWon
private SimpleLabel applesLbl becomes new(SimpleLabel)
private RECT applesHb becomes new(RECT)
private int goldGained
private RECT ar15Hb becomes new(RECT)
private SimpleLabel arLbl becomes new(SimpleLabel)

private func fillWhiteboxes {

	foreach (tpl,enemyBtns.toArray) {
			
		RECTF whiteBox becomes new(RECTF)
		whiteBox.left becomes tpl.item1.left
		whiteBox.right becomes tpl.item1.right+1
		whiteBox.bottom becomes tpl.item1.bottom+1
		whiteBox.top becomes tpl.item1.top
		form.fillRectangles.add(whiteBox)
		
	}
}

public func show {
	
	ImageReference ref becomes new(ImageReference)
	ref.y becomes 200
	ref.height becomes 64
	ref.width becomes 92
	ref.fileName becomes player.sprite
	form.images.add(ref)
	Line border becomes new(Line)
	border.x0 becomes form.w
	border.y becomes ref.y+ref.height
	border.y0 becomes border.y
	form.lines.add(border)
	SimpleLabel nameLbl becomes new(SimpleLabel)
	nameLbl.text becomes "You"
	nameLbl.y becomes border.y0+1
	form.addComponent(nameLbl)
	healthLbl.text becomes "HP: ......./......."
	wsprintfA(healthLbl.text,"HP: %d/%d",player.currentHealth,player.health)
	healthLbl.y becomes nameLbl.y+25
	form.addComponent(healthLbl)
	int curX becomes 500
	foreach (e,enemies) {
		
		ImageReference ref0 becomes new(ImageReference)
		e.img becomes ref0
		ref0.fileName becomes e.spritePath
		ref0.x becomes curX
		form.images.add(ref0)
		RECT btnHb becomes new(RECT)
		SimpleLabel healthLbl becomes new(SimpleLabel)
		btnHb becomes form.drawBtn(ref0.x,65,"Attack")
		byte# buff becomes #17
		healthLbl.text becomes cast(buff+8,str)
		healthLbl.x becomes ref0.x
		healthLbl.y becomes 100
		wsprintfA(healthLbl.text,"%d/%d",e.currentHealth,e.maxHealth)
		Tuple<RECT,Enemy> tpl becomes new(Tuple<RECT,Enemy>)
		tpl.item1 becomes btnHb
		tpl.item2 becomes e
		Tuple<SimpleLabel,Enemy> tpl0 becomes new(Tuple<SimpleLabel,Enemy>) 
		tpl0.item1 becomes healthLbl
		tpl0.item2 becomes e
		enemyBtns.add(tpl)
		enemyLbls.add(tpl0)
		form.addComponent(healthLbl)
		SimpleLabel enemNameLbl becomes new(SimpleLabel)
		enemNameLbl.text becomes e.name
		enemNameLbl.x becomes ref0.x
		enemNameLbl.y becomes 85
		form.addComponent(enemNameLbl)
		e.attackCdMax becomes (25/(e.speed+3))*10
		if (curX,=,0) { break }
		curX becomes curX-100
		
	}
	Line barLn becomes new(Line)
	barLn.y becomes healthLbl.y+25
	barLn.y0 becomes barLn.y
	barLn.x becomes 1
	barLn.x0 becomes barLn.x+101
	Line barLn0 becomes new(Line)
	barLn0.y becomes barLn.y
	barLn0.y0 becomes barLn0.y+25
	barLn0.x becomes barLn.x
	barLn0.x0 becomes barLn0.x
	Line barLn1 becomes new(Line)
	barLn1.y becomes barLn0.y0
	barLn1.y0 becomes barLn1.y
	barLn1.x becomes barLn0.x
	barLn1.x0 becomes barLn.x0
	Line barLn2 becomes new(Line)
	barLn2.x becomes barLn.x0
	barLn2.x0 becomes barLn2.x
	barLn2.y becomes barLn.y
	barLn2.y0 becomes barLn0.y0
	form.lines.add(barLn)
	form.lines.add(barLn0)
	form.lines.add(barLn1)
	form.lines.add(barLn2)
	attackCdLoadingBar.left becomes barLn.x+1
	attackCdLoadingBar.top becomes barLn.y+1
	attackCdLoadingBar.right becomes attackCdLoadingBar.left+100
	attackCdLoadingBar.bottom becomes attackCdLoadingBar.top+24
	form.rectangles.add(attackCdLoadingBar)
	if (player.attackCd,=/=,0) {
		fillWhiteboxes
		onCd becomes true
		attackCdLoadingBar.right becomes attackCdLoadingBar.left+10*attackCdTenPercentEquivalent/player.attackCd
	}
	ImageReference applesRef becomes new(ImageReference)
	applesRef.x becomes 150
	applesRef.y becomes border.y+5
	applesRef.fileName becomes "apple.bmp"
	form.images.add(applesRef)
	applesLbl.text becomes "Apples (x.....)"
	wsprintfA(applesLbl.text,"Apples (x%d)",player.apples,null)
	applesLbl.x becomes applesRef.x+34
	applesLbl.y becomes applesRef.y
	form.addComponent(applesLbl)
	applesHb becomes form.drawBtn(applesLbl.x,applesLbl.y+16,"Consume")
	if (player.ar15Equipped) {
		ImageReference arRef becomes new(ImageReference)
		arRef.x becomes 118
		arRef.y becomes applesRef.y+48
		arRef.fileName becomes "ar.bmp"
		form.images.add(arRef)
		arLbl.text becomes "AR-15 (Ready)"
		if (player.ar15Cd,=/=,0) { wsprintfA(arLbl.text,"AR-15 (%ds)",player.ar15Cd/40,null) }
		arLbl.x becomes arRef.x+66
		arLbl.y becomes arRef.y
		form.addComponent(arLbl)
		ar15Hb becomes form.drawBtn(arLbl.x,arLbl.y+16,"Shoot")
	}
	form.rePaint
}

private func removeLastBox {
	form.hitboxes.remove(lastIndex)
}
private func finishBattle {
	BattleFinishArgs args becomes new(BattleFinishArgs)
	args.expGained becomes expGained
	args.playerWon becomes playerWon
	args.goldGained becomes goldGained
	onBattleEnd.raise(args)
}

private func(Enemy e) attackPlayer {
	
	; Show basic animation to indicate that enemy is attacking ...
	; Undone
	
	; Enemy critting ...
	int dmg becomes e.damage
	if (e.hitRotation,=,e.critRate) {
		dmg becomes (dmg*(100+e.critDmg))/100
		e.hitRotation becomes 1
	}
	else { e.hitRotation becomes e.hitRotation+1 }
	if (player.helmetEquipped) { dmg becomes dmg-1 }
	
	player.currentHealth becomes player.currentHealth-dmg
	if (player.currentHealth,<=,0) {
		; Player dead
		player.attackCd becomes 0
		form.fncExecQueue.add($form.onTimerTick.clearFunctions)
		form.fncExecQueue.add($form.fillRectangles.clear)
		player.currentHealth becomes player.health
		playerWon becomes false
		form.fncExecQueue.add($finishBattle)
	}
	else { wsprintfA(healthLbl.text,"HP: %d/%d",player.currentHealth,player.health) }
	form.rePaint
	
}

private func(TimerEventArgs args) onTick {
	
	; Enemies fighting back...
	foreach (e,enemies) {
		if (e.dead) { continue }
		if (e.attackCd,=,0) {
			e.attackCd becomes e.attackCdMax
			attackPlayer(e)
			continue
		}
		e.attackCd becomes e.attackCd-1
	}
	if (player.ar15Cd,=/=,0) {
		player.ar15Cd becomes player.ar15Cd-1
		if (player.ar15Cd,=,0) {
			arLbl.text becomes "AR-15 (Ready)"
		}
		else {
			if (player.ar15Cd%40,=,0) {
				wsprintfA(arLbl.text,"AR-15 (%ds)",player.ar15Cd/40,null)
				form.rePaint
			}
		}
	}
	
	; Player fighting...
	if (player.attackCd,=,0) { retn }
	if (player.attackCd,=,1) { 
		onCd becomes false
		form.fillRectangles.clear
		form.rePaint
	}
	player.attackCd becomes player.attackCd-1
	if (player.attackCd%attackCdTenPercentEquivalent,=,0) {
		attackCdLoadingBar.right becomes attackCdLoadingBar.right+10
		form.rePaint
	}
}

private func(Enemy enemy,int dmg,RECT enemyRect) dmgEnemy {
	enemy.currentHealth becomes enemy.currentHealth-dmg
	foreach (tpl,enemyLbls.toArray) {
		
		if (tpl.item2,=,enemy) {
			if (enemy.currentHealth,<=,0) {
				; Remove image, set health bar to 'RIP' and disable attack btn
				tpl.item1.text becomes "RIP"
				int index becomes form.images.indexOf(enemy.img)
				form.images.remove(index)
				lastIndex becomes form.hitboxes.indexOf(enemyRect)
				form.fncExecQueue.add($removeLastBox)
				expGained becomes expGained+((enemy.maxHealth/5)+enemy.damage+enemy.speed)+enemy.bonusXp
				goldGained becomes goldGained+enemy.goldOnKill
				++enemiesKilled
				tpl.item2.dead becomes true
				player.enemiesKilled becomes player.enemiesKilled+1
				if (player.hasTrophyCase) {
					if (player.enemiesKilled%10,=,0) {
						player.damage becomes player.damage+1
					}
				}
				if (enemiesKilled,=,lengthof(enemies)) {
					; Finish battle...
					; Keep in mind at this point removeLastBox is in the fncExecQueue
					form.onTimerTick.removeFunction($onTick)
					form.fncExecQueue.add($form.fillRectangles.clear)
					playerWon becomes true
					form.fncExecQueue.add($finishBattle)
				}
			}
			else {
				wsprintfA(tpl.item1.text,"%d/%d",enemy.currentHealth,enemy.maxHealth)
			}
			break
		}
		
	}
}

private func(Enemy enemy,RECT enemyRect) attackEnemy {
	
	;TODO attack cooldown (based on player.speed)
	int dmg becomes player.damage
	if (player.hitRotation,=,player.critRate) {
		dmg becomes (dmg*(100+player.critDmg))/100
		player.hitRotation becomes 1
	}
	else { player.hitRotation becomes player.hitRotation+1 }
	dmgEnemy(enemy,dmg,enemyRect)
	onCd becomes true
	fillWhiteboxes
	player.attackCd becomes attackCdMax
	attackCdLoadingBar.right becomes attackCdLoadingBar.left
	form.rePaint
	
}

private func(CollisionEventArgs args) onClick {
	
	if (args.hitbox,=,applesHb) {
		if (player.consumeApple) {
			wsprintfA(applesLbl.text,"Apples (x%d)",player.apples,null)
			wsprintfA(healthLbl.text,"HP: %d/%d",player.currentHealth,player.health)
			form.rePaint
		}
		retn
	}
	if (args.hitbox,=,ar15Hb) {
		if (player.ar15Cd,=,0) {
			foreach (tpl,enemyBtns.toArray) {
				dmgEnemy(tpl.item2,20,tpl.item1)
			}
			player.ar15Cd becomes 400
			wsprintfA(arLbl.text,"AR-15 (%ds)",player.ar15Cd/40,null)
			form.rePaint
		}
		retn
	}
	if (onCd) { retn }
	
	foreach (tpl,enemyBtns.toArray) {
		
		if (tpl.item1,=,args.hitbox) {
			attackEnemy(tpl.item2,tpl.item1)
			break
		}
		
	}
	
}

constructor (Enemy# enems,Player ply,Form rForm) {
	enemies becomes enems
	player becomes ply
	form becomes rForm
	attackCdMax becomes (25/(player.speed+3))*10
	attackCdTenPercentEquivalent becomes attackCdMax/10
	form.onHitboxLmbDown.addFunction($onClick)
	form.onTimerTick.addFunction($onTick)
}