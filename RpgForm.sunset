import(Windows/Form)
import(Windows/Drawing/SimpleLabel)
import(Windows/KeyEventArgs)
import(Windows/Drawing/RECT)
import(Windows/FormEventArgs)
import(Windows/Drawing/Line)
import(Windows/MouseEventArgs)
import(Windows/CollisionEventArgs)
import(Windows/Drawing/ImageUtil)
import(Windows/Drawing/FormImage)
import(Simple-RPG\Enemy)
import(Simple-RPG\Player)
import(Simple-RPG\Battle)
import(Simple-RPG\BattleFinishArgs)
import(Random)
import(Simple-RPG\Shop)
import(Simple-RPG\ShopEntry)
import(Simple-RPG\Arena)

dllref(User32,str,str,int) cdecl:wsprintfA int

pullable Form form becomes new(Form,"RPG",100,100,600,400)
private Player player becomes new(Player)
private constant int Y becomes 310
private constant int Y0 becomes 100

HBITMAP shopBmp becomes ImageUtil.loadBitmap("Shop.bmp",200,300)
HBITMAP arenaBmp becomes ImageUtil.loadBitmap("Arena.bmp",200,300)
HBITMAP endlessBmp becomes ImageUtil.loadBitmap("Endless.bmp",200,300)

RECT mageHb
RECT rogueHb
RECT bardHb
RECT warriorHb
RECT remainder
bool promptingClass becomes false
bool onSkillTree becomes false
bool selecting becomes false

SimpleLabel indicator becomes new(SimpleLabel)
indicator.y becomes 245
indicator.text becomes ""
form.addComponent(indicator)

str blank becomes ""
str mageDescription becomes "As a mage, you will have the opportunity to purchase spells and have increased intellect"
str rogueDescription becomes "As a rogue, you will have increased speed and critical strike damage"
str bardDescription becomes "As a bard, you will gain double gold in endless mode"
str warriorDescription becomes "As a warrior, you will have increased damage and health"

SimpleLabel dmgLbl becomes new(SimpleLabel)
dmgLbl.text becomes "Damage (....)"
dmgLbl.y becomes 125
SimpleLabel spdLbl becomes new(SimpleLabel)
spdLbl.text becomes "Speed (....)"
spdLbl.x becomes 100
spdLbl.y becomes 125
SimpleLabel critLbl becomes new(SimpleLabel)
critLbl.text becomes "Crit Damage (.....%)"
critLbl.y becomes 225
SimpleLabel healthLbl becomes new(SimpleLabel)
healthLbl.text becomes "Health (.......)"
healthLbl.y becomes 175
SimpleLabel intLbl becomes new(SimpleLabel)
intLbl.text becomes "Intellect (....)"
intLbl.x becomes 100
intLbl.y becomes 175

RECT dmgBtn
RECT spdBtn
RECT critBtn
RECT healthBtn
RECT intBtn
RECT exitBtn

RECT shopBtn
RECT arenaBtn
RECT endlessBtn
RECT skillTreeBtn

SimpleLabel statpLbl becomes new(SimpleLabel)
str buff0 becomes "Unused stat points: ..."
statpLbl.text becomes buff0
statpLbl.y becomes 20

int endlessStage

; Define entries
; If mage, include spell entries
func purchaseApple {
	player.apples becomes player.apples+1
}
func purchaseMagicBeans {
	player.addExp(player.expTillNextLvl/5)
}
func purchaseClover {
	player.critDmg becomes player.critDmg+10
}
func purchaseBook {
	player.hasChemistryBook becomes true
}
func purchaseBreastplate {
	player.breastplateEquipped becomes true
	player.health becomes (player.health/3)*4
	player.currentHealth becomes player.health
}
func purchaseShinguard {
	player.shinguardEquipped becomes true
}
func purchaseHelmet {
	player.helmetEquipped becomes true
}
func purchaseGloves {
	player.critRate becomes 3
}
func purchaseAR15 {
	player.ar15Equipped becomes true
}
func purchaseTrophyCase {
	player.hasTrophyCase becomes true
}
func purchaseBlessing { player.hasBlessing becomes true }
func purchaseBlindness { player.hasBlindness becomes true }
func purchaseCrucify { player.hasCrucify becomes true }
func purchaseRebirth { player.hasRebirth becomes true }
private ShopEntry# entries becomes #14
ShopEntry entry becomes new(ShopEntry)
entry.name becomes "Apple"
entry.cost becomes 50
entry.description becomes "Heal 33% of your health mid-battle. Cost 50g"
entry.onPurchase becomes $purchaseApple
entries[0] becomes entry
ShopEntry entry0 becomes new(ShopEntry)
entry0.name becomes "Magic beans"
entry0.cost becomes 200
entry0.description becomes "Immediately grant 20% EXP progress to next level. Cost 200g"
entry0.onPurchase becomes $purchaseMagicBeans
entries[1] becomes entry0
ShopEntry entry1 becomes new(ShopEntry)
entry1.name becomes "4 leaf clover"
entry1.cost becomes 350
entry1.description becomes "Gain 10% bonus crit damage. Requires 10 intellect. Cost 350g"
entry1.onPurchase becomes $purchaseClover
entry1.intellectRequirement becomes 10
entries[2] becomes entry1
ShopEntry entry2 becomes new(ShopEntry)
entry2.name becomes "Chemistry book"
entry2.cost becomes 300
entry2.description becomes "Apples become 2x as effective. Requires 20 intellect. Cost 300g"
entry2.onPurchase becomes $purchaseBook
entry2.intellectRequirement becomes 20
entry2.oneTimePurchase becomes true
entries[3] becomes entry2

; Breastplate - Increases health by 33% (1000g)
; Shinguard - Decreases speed of enemy by up to ten (1500g)
; Helmet - Reduce incoming damage of each attack by 1 (500g)
; Gloves - Increase crit chance by 40% (player.critRate from 5 to 3) (500g)
; AR 15 - Deal 20 damage to each opponent in combat. 10sec cooldown. (15 intellect, 750g)
; Trophy case - Permanently gain 1 damage for every 10 enemies killed. (2500g)

ShopEntry entry3 becomes new(ShopEntry)
entry3.name becomes "Breastplate"
entry3.cost becomes 1000
entry3.description becomes "Increases health by 33%. Cost 1000g"
entry3.onPurchase becomes $purchaseBreastplate
entry3.oneTimePurchase becomes true
entries[4] becomes entry3
ShopEntry entry4 becomes new(ShopEntry)
entry4.name becomes "Shinguard"
entry4.cost becomes 1500
entry4.description becomes "Decreases speed of enemy by up to ten. Cost 1500g"
entry4.onPurchase becomes $purchaseShinguard
entry4.oneTimePurchase becomes true
entries[5] becomes entry4
ShopEntry entry5 becomes new(ShopEntry)
entry5.name becomes "Helmet"
entry5.cost becomes 500
entry5.description becomes "Reduce incoming damage of each attack by 1. Cost 500g"
entry5.onPurchase becomes $purchaseHelmet
entry5.oneTimePurchase becomes true
entries[6] becomes entry5
ShopEntry entry6 becomes new(ShopEntry)
entry6.name becomes "Gloves"
entry6.cost becomes 500
entry6.description becomes "Increase crit chance by 60% (from 20% to 33%). Cost 500g"
entry6.onPurchase becomes $purchaseGloves
entry6.oneTimePurchase becomes true
entries[7] becomes entry6
ShopEntry entry7 becomes new(ShopEntry)
entry7.name becomes "AR 15"
entry7.cost becomes 750
entry7.description becomes "Deal 20 damage to everyone, 10s cooldown. (15 intellect, 750g)"
entry7.onPurchase becomes $purchaseAR15
entry7.intellectRequirement becomes 15
entry7.oneTimePurchase becomes true
entries[8] becomes entry7
ShopEntry entry8 becomes new(ShopEntry)
entry8.name becomes "Trophy case"
entry8.cost becomes 2500
entry8.description becomes "Permanently gain 1 dmg for every 10 enemies killed. Cost 2500g"
entry8.onPurchase becomes $purchaseTrophyCase
entry8.oneTimePurchase becomes true
entries[9] becomes entry8
ShopEntry entry9 becomes new(ShopEntry)
entry9.name becomes "Blessing (Mage)"
entry9.cost becomes 50
entry9.description becomes "Increase stats but health by 50% for 10s. 5+ intellect, 50g"
entry9.onPurchase becomes $purchaseBlessing
entry9.oneTimePurchase becomes true
entry9.isSpell becomes true
entry9.intellectRequirement becomes 5
entries[10] becomes entry9
ShopEntry entry10 becomes new(ShopEntry)
entry10.name becomes "Blindness (Mage)"
entry10.cost becomes 100
entry10.description becomes "Stop enemies for attacking for 8s. 10+ intellect. Cost 100g"
entry10.onPurchase becomes $purchaseBlindness
entry10.oneTimePurchase becomes true
entry10.intellectRequirement becomes 10
entry10.isSpell becomes true
entries[11] becomes entry10
ShopEntry entry11 becomes new(ShopEntry)
entry11.name becomes "Crucify (Mage)"
entry11.cost becomes 25
entry11.description becomes "Next attack will deal 300% dmg. 15+ intellect. Cost 25g"
entry11.onPurchase becomes $purchaseCrucify
entry11.oneTimePurchase becomes true
entry11.intellectRequirement becomes 15
entry11.isSpell becomes true
entries[12] becomes entry11
ShopEntry entry12 becomes new(ShopEntry)
entry12.name becomes "Rebirth (Mage)"
entry12.cost becomes 150
entry12.description becomes "Restore all health. 20+ intellect. Cost 150g"
entry12.onPurchase becomes $purchaseRebirth
entry12.oneTimePurchase becomes true
entry12.intellectRequirement becomes 20
entry12.isSpell becomes true
entries[13] becomes entry12
Shop shop becomes new(Shop,form,player,entries)

Arena arena becomes new(Arena,form,player)
int krabsInterval becomes 80

private func wipe {

	form.fncExecQueue.add($form.hitboxes.clear)
	form.simpleLabels.clear
	form.lines.clear
	form.images.clear
	form.rectangles.clear
	form.rePaint

}

public func(FormEventArgs args) promptClass {
	
	promptingClass becomes true
	form.createTimer(25)
	
	; -- Prompt --
	SimpleLabel lbl becomes new(SimpleLabel)
	lbl.text becomes "Select your class"
	lbl.x becomes 250
	form.addComponent(lbl)
	; ------------
	
	; -- Lines (Containers) -- 
	
	int Y1 becomes Y-45
	
	Line line becomes new(Line)
	line.y becomes Y1
	line.x0 becomes 600
	line.y0 becomes Y1
	form.lines.add(line)
	Line line0 becomes new(Line)
	line0.x becomes 150
	line0.y becomes Y1
	line0.x0 becomes 150
	line0.y0 becomes 370
	form.lines.add(line0)
	Line line1 becomes new(Line)
	line1.x becomes 300
	line1.y becomes Y1
	line1.x0 becomes 300
	line1.y0 becomes 370
	form.lines.add(line1)
	Line line2 becomes new(Line)
	line2.x becomes 0
	line2.y becomes 370
	line2.x0 becomes 600
	line2.y0 becomes 370
	form.lines.add(line2)
	Line line3 becomes new(Line)
	line3.x becomes 450
	line3.y becomes Y1
	line3.x0 becomes 450
	line3.y0 becomes 370
	form.lines.add(line3)
	Line line4 becomes new(Line)
	line4.x becomes 0
	line4.y becomes Y1
	line4.x0 becomes 0
	line4.y0 becomes 370
	form.lines.add(line4)
	Line line5 becomes new(Line)
	line5.x becomes 593
	line5.y becomes Y1
	line5.x0 becomes 593
	line5.y0 becomes 370
	form.lines.add(line5)
	; ------------------------
	
	; Hitboxes
	mageHb becomes new(RECT)
	mageHb.right becomes 150
	mageHb.bottom becomes 370
	mageHb.top becomes Y1
	form.hitboxes.add(mageHb)
	rogueHb becomes new(RECT)
	rogueHb.left becomes 151
	rogueHb.bottom becomes 370
	rogueHb.top becomes Y1
	rogueHb.right becomes 300
	form.hitboxes.add(rogueHb)
	bardHb becomes new(RECT)
	bardHb.left becomes 301
	bardHb.bottom becomes 370
	bardHb.top becomes Y1
	bardHb.right becomes 450
	form.hitboxes.add(bardHb)
	warriorHb becomes new(RECT)
	warriorHb.right becomes 600
	warriorHb.left becomes 451
	warriorHb.top becomes Y1
	warriorHb.bottom becomes 370
	form.hitboxes.add(warriorHb)
	remainder becomes new(RECT)
	remainder.right becomes 600
	remainder.bottom becomes Y1
	form.hitboxes.add(remainder)
	; --------
	
	; Options
	SimpleLabel lbl0 becomes new(SimpleLabel)
	lbl0.text becomes "Mage"
	lbl0.y becomes Y
	lbl0.x becomes 52
	SimpleLabel lbl1 becomes new(SimpleLabel)
	lbl1.text becomes "Rogue"
	lbl1.y becomes Y
	lbl1.x becomes 202
	SimpleLabel lbl2 becomes new(SimpleLabel)
	lbl2.text becomes "Bard"
	lbl2.y becomes Y
	lbl2.x becomes 352
	SimpleLabel lbl3 becomes new(SimpleLabel)
	lbl3.text becomes "Warrior"
	lbl3.y becomes Y
	lbl3.x becomes 502
	form.addComponent(lbl0)
	form.addComponent(lbl1)
	form.addComponent(lbl2)
	form.addComponent(lbl3)
	; -------
	
	form.rePaint
	
}

func (CollisionEventArgs args) collision {
	
	if (promptingClass) {
		
		RECT rect becomes args.hitbox
		switch (rect) {
			
			case(mageHb):
				if (indicator.text,=/=,mageDescription) {
					indicator.text becomes mageDescription
					form.rePaint
				}
				break
			case(rogueHb):
				if (indicator.text,=/=,rogueDescription) {
					indicator.text becomes rogueDescription
					form.rePaint
				}
				break
			case(bardHb):
				if (indicator.text,=/=,bardDescription) {
					indicator.text becomes bardDescription
					form.rePaint
				}
				break
			case(warriorHb):
				if (indicator.text,=/=,warriorDescription) {
					indicator.text becomes warriorDescription
					form.rePaint
				}
				break
			default:
				if (indicator.text,=/=,blank) {
					indicator.text becomes blank
					form.rePaint
				}
				break
			
		}
		
	}
	
}

func exitSkillTree {
	
	onSkillTree becomes false
	selecting becomes true
	shopBtn becomes form.drawBtn(75,300,"Shop")
	arenaBtn becomes form.drawBtn(275,300,"Arena")
	endlessBtn becomes form.drawBtn(475,300,"Endless")
	skillTreeBtn becomes form.drawBtn(262,350,"Skill Tree")
	; Images for btns
	FormImage ref becomes new(FormImage)
	ref.bitmap becomes shopBmp
	form.images.add(ref)
	FormImage ref0 becomes new(FormImage)
	ref0.bitmap becomes arenaBmp
	ref0.x becomes 200
	form.images.add(ref0)
	FormImage ref1 becomes new(FormImage)
	ref1.bitmap becomes endlessBmp
	ref1.x becomes 400
	form.images.add(ref1)
	form.rePaint
	
}

func openSkillTree {
	
	onSkillTree becomes true
	
	; Info Labels
	SimpleLabel lbl becomes new(SimpleLabel)
	str buff becomes "Player skill tree (lvl .....)"
	wsprintfA(buff,"Player skill tree (lvl %d)",player.level)
	lbl.text becomes buff
	form.addComponent(lbl)
	SimpleLabel lbl3 becomes new(SimpleLabel)
	lbl3.text becomes "Stats"
	lbl3.x becomes 75
	lbl3.y becomes 100
	form.addComponent(lbl3)
	SimpleLabel lbl2 becomes new(SimpleLabel)
	lbl2.text becomes player.getClassStr
	lbl2.y becomes 40
	form.addComponent(lbl2)
	form.addComponent(statpLbl)
	SimpleLabel xpLbl becomes new(SimpleLabel)
	xpLbl.text becomes "EXP"
	xpLbl.x becomes form.w-155
	xpLbl.y becomes 6
	form.addComponent(xpLbl)
	Line barLn becomes new(Line)
	barLn.x becomes xpLbl.x+37
	barLn.x0 becomes barLn.x+102
	barLn.y becomes 1
	barLn.y0 becomes barLn.y
	Line barLn0 becomes new(Line)
	barLn0.y becomes barLn.y0
	barLn0.y0 becomes barLn.y+27
	barLn0.x becomes barLn.x0
	barLn0.x0 becomes barLn0.x
	form.lines.add(barLn)
	form.lines.add(barLn0)
	Line barLn1 becomes new(Line)
	barLn1.x becomes barLn.x
	barLn1.x0 becomes barLn.x
	barLn1.y becomes barLn0.y
	barLn1.y0 becomes barLn0.y0
	Line barLn2 becomes new(Line)
	barLn2.x becomes barLn.x
	barLn2.x0 becomes barLn.x0
	barLn2.y becomes barLn1.y0
	barLn2.y0 becomes barLn2.y
	form.lines.add(barLn1)
	form.lines.add(barLn2)
	RECT fillBar becomes new(RECT)
	fillBar.left becomes barLn.x+1
	fillBar.top becomes barLn.y+1
	fillBar.bottom becomes barLn.y+27
	fillBar.right becomes fillBar.left+((player.exp*100)/(player.expTillNextLvl))
	form.rectangles.add(fillBar)
	wsprintfA(buff0,"Unused stat points: %d",player.statPoints)
	; ------------
	
	; Buttons
	exitBtn becomes form.drawBtn(form.w/2-15,352,"Exit")
	dmgBtn becomes form.drawBtn(0,150,"Upgrade")
	spdBtn becomes form.drawBtn(100,150,"Upgrade")
	healthBtn becomes form.drawBtn(0,200,"Upgrade")
	intBtn becomes form.drawBtn(100,200,"Upgrade")
	critBtn becomes form.drawBtn(0,250,"Upgrade")
	; -------
	
	; Tree 
	form.addComponent(critLbl)
	form.addComponent(healthLbl)
	form.addComponent(dmgLbl)
	form.addComponent(spdLbl)
	form.addComponent(intLbl)
	; ---
	
	wsprintfA(dmgLbl.text,"Damage (%d)",player.damage)
	if (player.speed,=,21) { spdLbl.text becomes "Speed (Max)" }
	else { wsprintfA(spdLbl.text,"Speed (%d)",player.speed) }
	wsprintfA(healthLbl.text,"Health (%d)",player.health)
	wsprintfA(intLbl.text,"Intellect (%d)",player.intellect)
	wsprintfA(critLbl.text,"Crit Damage (%d%%)",player.critDmg)
	
	form.rePaint
	
}

func(Enemy enemy) calcEnemyDifficulty int {
	
	retn((enemy.maxHealth/3)+enemy.damage+enemy.speed)
	
}

func(int difficulty) genEnemyWithDifficulty Enemy {
	
	; Generate random sprite, if difficulty is high enough
	; If sprite is swine, difficulty doesn't change
	; If sprite is ghoul or some other sprite, difficulty-10 but give extra speed and less damage. For example
	; Also, randomize damage/speed/health a bit
	
	int spriteRdm
	int spriteRdmMax becomes 0
	; Any difficulty: Swine (0)
	; 30+ difficulty: Ghoul (1)
	; 100+ difficulty: Cop (2)
	; 300+ difficulty: Butcher Man (3)
	if (difficulty,>=,20) { ++spriteRdmMax }
	if (difficulty,>=,75) { ++spriteRdmMax }
	if (difficulty,>=,100) { ++spriteRdmMax }
	if (difficulty,>=,155) { ++spriteRdmMax }
	if (difficulty,>=,175) { ++spriteRdmMax }
	spriteRdm becomes Random.genXch(spriteRdmMax)
	
	Enemy enemy becomes new(Enemy)
	krabsInterval becomes krabsInterval-1
	if (krabsInterval,=,0) {
		enemy.spriteId becomes 9
		enemy.name becomes "Mr. Krabs"
		enemy.goldOnKill becomes 250
		enemy.maxHealth becomes 1
		enemy.currentHealth becomes 1
		krabsInterval becomes 100
	}
	else {
		switch (spriteRdm) {
			case(0): ; (Swine)
				enemy.maxHealth becomes difficulty/3
				enemy.currentHealth becomes enemy.maxHealth
				enemy.damage becomes difficulty/9
				enemy.speed becomes difficulty/9
				enemy.name becomes "Swine"
				enemy.spriteId becomes 17
				enemy.critRate becomes 5
				enemy.critDmg becomes 33
				enemy.goldOnKill becomes 1
				break
			case(1): ; (Ghoul)
				enemy.maxHealth becomes difficulty/6
				enemy.currentHealth becomes enemy.maxHealth
				enemy.damage becomes difficulty/12
				enemy.speed becomes difficulty/3
				enemy.name becomes "Ghoul"
				enemy.spriteId becomes 7
				enemy.critRate becomes 3
				enemy.critDmg becomes 100
				enemy.bonusXp becomes difficulty/10
				enemy.goldOnKill becomes 2
				break
			case(2): ; (Cop)
				enemy.maxHealth becomes difficulty
				enemy.currentHealth becomes enemy.maxHealth
				enemy.damage becomes difficulty/4
				enemy.speed becomes difficulty/30
				enemy.name becomes "Cop"
				enemy.spriteId becomes 6
				enemy.critRate becomes 5
				enemy.critDmg becomes 33
				enemy.bonusXp becomes difficulty/8
				enemy.attackCd becomes 150
				enemy.goldOnKill becomes 3
				break
			case(3): ; (Butcher Man)
				enemy.maxHealth becomes difficulty*2
				enemy.currentHealth becomes enemy.maxHealth
				enemy.damage becomes difficulty
				enemy.speed becomes difficulty/50
				enemy.name becomes "Butcher Man"
				enemy.spriteId becomes 2
				enemy.critRate becomes 5
				enemy.critDmg becomes 33
				enemy.bonusXp becomes difficulty/6
				enemy.attackCd becomes 200
				enemy.goldOnKill becomes 4
				break
			case(4): ; (Sniper)
				enemy.maxHealth becomes difficulty/3+10
				enemy.currentHealth becomes enemy.maxHealth
				enemy.damage becomes difficulty*4
				enemy.speed becomes difficulty/100
				enemy.name becomes "Sniper"
				enemy.spriteId becomes 14
				enemy.critRate becomes 5
				enemy.critDmg becomes 33
				enemy.bonusXp becomes difficulty/8
				enemy.attackCd becomes 300
				enemy.goldOnKill becomes 4
				break
			case(5): ; (Cloud)
				enemy.maxHealth becomes 1
				enemy.currentHealth becomes enemy.maxHealth
				enemy.damage becomes difficulty/20
				enemy.speed becomes difficulty/2
				enemy.name becomes "Cloud"
				enemy.spriteId becomes 4
				enemy.critRate becomes 2
				enemy.critDmg becomes 200
				enemy.bonusXp becomes difficulty
				enemy.attackCd becomes 10
				enemy.goldOnKill becomes 2
				break
		}
	}
	if (enemy.damage,=,0) { enemy.damage becomes 1 }
	if (player.shinguardEquipped) { enemy.speed becomes enemy.speed-10 }
	if (enemy.speed,<=,0) { enemy.speed becomes 1 }
	if (enemy.maxHealth,=,0) {
		enemy.maxHealth becomes 1
		enemy.currentHealth becomes 1
	} 
	retn(enemy)
	
}

func(int difficulty) generateEnemies Enemy# {
	
	int enemies
	if (difficulty,<=,20) { enemies becomes 1 }
	else { 
		if (difficulty,>,20) {
			if (difficulty,<,40) {
				enemies becomes Random.gen(2)+1
			}
			else {
				enemies becomes Random.gen(3)+2
			}
		}
	}
	
	int diffPerEnemy becomes difficulty/enemies
	Enemy# enemyArr becomes #enemies
	int i becomes 0
	while (i,=/=,enemies) {
		enemyArr[i] becomes genEnemyWithDifficulty(diffPerEnemy)
		++i
	}
	retn(enemyArr)
	
}

func(BattleFinishArgs args) battleEnded {
	
	Battle bt becomes cast(args.battle,Battle)
	
	player.addExp(args.expGained)
	player.gold becomes player.gold+args.goldGained
	if (player.class,=,player.Bard) {
		player.gold becomes player.gold+args.goldGained
	}
	wipe
	; -Endless --------------------------------
	if (endlessStage,=/=,0) { 
		if (!args.playerWon) {
			endlessStage becomes 0
			form.fncExecQueue.add($openSkillTree)
			player.ar15Cd becomes 0
			bt.refreshSpells
			retn
		}
		else {
			++endlessStage
			Enemy# enemies becomes generateEnemies(endlessStage*10)
			Battle battle becomes new(Battle,enemies,player,form)
			battle.onBattleEnd.addFunction($battleEnded)
			form.fncExecQueue.add($battle.show)
		}
	}
	; -----------------------------------------
	
}

func beginEndless {
	
	endlessStage becomes 1
	Enemy stdEnemy becomes new(Enemy)
	stdEnemy.maxHealth becomes 5
	stdEnemy.currentHealth becomes stdEnemy.maxHealth
	stdEnemy.damage becomes 1
	stdEnemy.speed becomes 1
	stdEnemy.name becomes "Swine"
	stdEnemy.spriteId becomes 17
	stdEnemy.critRate becomes 5
	stdEnemy.critDmg becomes 33
	stdEnemy.goldOnKill becomes 1
	Enemy# enemies becomes #,(stdEnemy)
	Battle battle becomes new(Battle,enemies,player,form)
	battle.onBattleEnd.addFunction($battleEnded)
	battle.show
	
}

func onShopExit {
	
	wipe
	form.fncExecQueue.add($exitSkillTree)
	
}

func(CollisionEventArgs args) btnClick {
	
	RECT rect becomes args.hitbox
	
	if (promptingClass) {
		if (rect,=,remainder) { retn }
		if (rect,=,mageHb) { player.class becomes player.Mage }
		if (rect,=,rogueHb) { player.class becomes player.Rogue }
		if (rect,=,bardHb) { player.class becomes player.Bard }
		if (rect,=,warriorHb) { player.class becomes player.Warrior }
		promptingClass becomes false
		wipe form.fncExecQueue.add($openSkillTree)
	}
	else {
		if (onSkillTree) {
			
			if (rect,=,exitBtn) { wipe form.fncExecQueue.add($exitSkillTree) retn }
			if (player.statPoints,=,0) { retn }
			
			switch (rect) {
				case (dmgBtn):
					if (player.class,=,player.Warrior) { player.damage becomes player.damage+2 }
					else { player.damage becomes player.damage+1 }
					wsprintfA(dmgLbl.text,"Damage (%d)",player.damage)
					break
				case (spdBtn):
					if (player.speed,=,21) { retn }
					if (player.class,=,player.Rogue) { player.speed becomes player.speed+2 }
					else { player.speed becomes player.speed+1 }
					if (player.speed,=,21) { spdLbl.text becomes "Speed (Max)" }
					else { wsprintfA(spdLbl.text,"Speed (%d)",player.speed) }
					break
				case (healthBtn):
					int up
					if (player.class,=,player.Warrior) { 
						if (player.breastplateEquipped) { up becomes 7  }
						else { up becomes 5 }
					}
					else { 
						if (player.breastplateEquipped) { up becomes 4 }
						else { up becomes 3 }
					}
					player.health becomes player.health+up
					wsprintfA(healthLbl.text,"Health (%d)",player.health)
					player.currentHealth becomes player.health
					break
				case (intBtn):
					if (player.class,=,player.Mage) { player.intellect becomes player.intellect+2 }
					else { player.intellect becomes player.intellect+1 }
					wsprintfA(intLbl.text,"Intellect (%d)",player.intellect)
					break
				case (critBtn):
					if (player.class,=,player.Rogue) { player.critDmg becomes player.critDmg+3 }
					else { player.critDmg becomes player.critDmg+2 }
					wsprintfA(critLbl.text,"Crit Damage (%d%%)",player.critDmg)
					break
			}
			player.statPoints becomes player.statPoints-1
			wsprintfA(statpLbl.text,"Unused stat points: %d",player.statPoints)
			form.rePaint
			
		}
		else {
			if (selecting) {
				selecting becomes false
				switch (rect) {
					case(shopBtn):
						; ... go to shop
						wipe form.fncExecQueue.add($shop.show)
						break
					case(arenaBtn):
						; ... go to arena
						wipe form.fncExecQueue.add($arena.show)
						break
					case(endlessBtn):
						; ... go to endless
						wipe form.fncExecQueue.add($beginEndless)
						break
					case(skillTreeBtn):
						; ... go to skill tree
						wipe form.fncExecQueue.add($openSkillTree)
						break
					default:
						break
				}
			}
		}
	}
}

constructor {
	form.onFormCreation.addFunction($promptClass)
	form.mouseEnter.addFunction($collision)
	form.onHitboxLmbDown.addFunction($btnClick)
	shop.onExitFnc becomes $onShopExit
	arena.onExitFnc becomes $onShopExit
	form.show
}
